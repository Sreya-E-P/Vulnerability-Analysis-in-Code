from pathlib import Path
import os
import psycopg2

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-s6vxr=wy0^tcocmmefafawd9$-d_xl)y2(v)5mg^j-4b3)4w6j'

DEBUG = False

ALLOWED_HOSTS = ['vulnerabilityanalysis.azurewebsites.net']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'vulnerability_detection',  # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vulnerability_detection_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'vulnerability_detection/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vulnerability_detection_project.wsgi.application'

# Establish connection using psycopg2
try:
    # Establish a connection to the PostgreSQL database
    cnx = psycopg2.connect(
        user=os.environ.get('PGUSER'),
        password=os.environ.get('PGPASSWORD'),
        host=os.environ.get('PGHOST'),
        port=os.environ.get('PGPORT', '5432'),
        database=os.environ.get('PGDATABASE')
    )

    # Create a cursor object using the connection
    cursor = cnx.cursor()

    # Execute a query
    cursor.execute("SELECT version();")

    # Fetch the result
    db_version = cursor.fetchone()
    print("Successfully connected to the PostgreSQL database")
    print("PostgreSQL Database Version:", db_version)

except (Exception, psycopg2.Error) as error:
    print("Error while connecting to PostgreSQL database:", error)

finally:
    # Close the cursor and connection
    if 'cnx' in locals():
        cursor.close()
        cnx.close()
        print("PostgreSQL connection is closed")

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'vulnerability_detection/static'),
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


