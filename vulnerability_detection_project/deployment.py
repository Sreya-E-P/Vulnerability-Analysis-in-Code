import os 
from .settings import *
from .settings import BASE_DIR

# Get environment variables with error handling
SECRET_KEY = os.environ.get('SECRET')
ALLOWED_HOSTS = [os.environ.get('WEBSITE_HOSTNAME')]
WEBSITE_HOSTNAME = os.environ.get('WEBSITE_HOSTNAME')
CSRF_TRUSTED_ORIGINS = ['https://' + WEBSITE_HOSTNAME] if WEBSITE_HOSTNAME else []

DEBUG = False

# Middleware including WhiteNoise
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
] 

# Static files configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Parse connection string
conn_str = os.environ.get('AZURE_POSTGRESQL_CONNECTIONSTRING', '')
conn_str_params = {}
if conn_str:
    conn_str_params = dict(pair.split('=') for pair in conn_str.split())

# Define DATABASES dictionary
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': conn_str_params.get('dbname'),
        'HOST': conn_str_params.get('host'),
        'USER': conn_str_params.get('user'),
        'PASSWORD': conn_str_params.get('password'),
    }
}
